<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Library</OutputType>
    <TargetFramework>netstandard2.0</TargetFramework>
    <RuntimeIdentifiers>win-x64;osx-x64;linux-x64</RuntimeIdentifiers>
    <AssemblyName>Mizux.Foo</AssemblyName>

    <!-- Nuget Properties-->
    <PackageId>Mizux.Foo</PackageId>
    <Version>1.0.0</Version>
    <Authors>Mizux</Authors>
    <Description>Meta Package depending on each Native package</Description>
    <Copyright>Copyright 2018 Google LLC</Copyright>
    <PackageLicenseUrl>https://github.com/Mizux/dotnet/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/Mizux/dotnet</PackageProjectUrl>
    <PackageTags>native</PackageTags>
    <PackageOutputPath>../../package</PackageOutputPath>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>

    <!-- Build Properties-->
    <ProduceReferenceAssembly>true</ProduceReferenceAssembly>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <BuildOutputTargetFolder Condition="'$(RuntimeIdentifier)' != ''">runtimes/$(RuntimeIdentifier)/lib</BuildOutputTargetFolder>
  </PropertyGroup>
  <!-- When building localy we want to be able to only depends on one RID to test -->
  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'linux-x64'">
    <Compile Include="Foo.cs" />
    <ProjectReference Include="../runtime.linux-x64.Foo/runtime.linux-x64.Foo.csproj" />
  </ItemGroup>
  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'osx-x64'">
    <Compile Include="Foo.cs" />
    <ProjectReference Include="../runtime.osx-x64.Foo/runtime.osx-x64.Foo.csproj" />
  </ItemGroup>
  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'win-x64'">
    <Compile Include="Foo.cs" />
    <ProjectReference Include="../runtime.win-x64.Foo/runtime.win-x64.Foo.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="runtime.json">
      <PackagePath>runtime.json</PackagePath>
      <Pack>true</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="$(OutputPath)/ref/*.dll">
      <PackagePath>ref/$(TargetFramework)/%(Filename)%(Extension)</PackagePath>
      <Pack>true</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- use when trying to pack an all in one package -->
  <!-- dotnet pack doesn't set RuntimeIdentifier, so we can use this... -->
  <PropertyGroup Condition="Exists('../../package')">
    <RestoreSources>../../package;$(RestoreSources);https://api.nuget.org/v3/index.json</RestoreSources>
  </PropertyGroup>
  <ItemGroup Condition="('$(RuntimeIdentifier)' == '') And Exists('../../package/runtime.linux-x64.Mizux.Foo.1.0.0.nupkg')">
    <PackageReference Include="runtime.linux-x64.Mizux.Foo" Version="1.0.0" PrivateAssets="none"/>
  </ItemGroup>
  <ItemGroup Condition="('$(RuntimeIdentifier)' == '') And Exists('../../package/runtime.osx-x64.Mizux.Foo.1.0.0.nupkg')">
    <PackageReference Include="runtime.osx-x64.Mizux.Foo" Version="1.0.0" PrivateAssets="none" />
  </ItemGroup>
  <ItemGroup Condition="('$(RuntimeIdentifier)' == '') And Exists('../../package/runtime.win-x64.Mizux.Foo.1.0.0.nupkg')">
    <PackageReference Include="runtime.win-x64.Mizux.Foo" Version="1.0.0" PrivateAssets="none" />
  </ItemGroup>
</Project>
