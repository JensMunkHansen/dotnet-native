<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Library</OutputType>
    <TargetFramework>netstandard2.0</TargetFramework>
    <RuntimeIdentifier>linux-x64</RuntimeIdentifier>
    <AssemblyName>runtime.linux-x64.Mizux.Foo</AssemblyName>

    <PackageId>runtime.linux-x64.Mizux.Foo</PackageId>
    <Version>1.0.0</Version>
    <Authors>Mizux</Authors>
    <Description>Simulate native wrapper of Foo/Native C++</Description>
    <Copyright>Copyright 2018 Google LLC</Copyright>
    <PackageLicenseUrl>https://github.com/Mizux/dotnet/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/Mizux/dotnet</PackageProjectUrl>
    <PackageTags>native</PackageTags>
    <PackageOutputPath>../../package</PackageOutputPath>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>

    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
    <ProduceReferenceAssembly>false</ProduceReferenceAssembly>
    <BuildOutputTargetFolder Condition="'$(RuntimeIdentifier)' != ''">runtimes\$(RuntimeIdentifier)\lib</BuildOutputTargetFolder>
  </PropertyGroup>

  <ItemGroup>
    <!-- Simulate native swig wrapper depending on the .so -->
    <Compile Include="Native.linux.cs" />
    <!-- Simulate native shared lib consumed by the Native.cs wrapper -->
    <Content Include="*.so">
      <PackagePath>runtimes\linux-x64\lib\netstandard2.0\%(Filename)%(Extension)</PackagePath>
      <Pack>true</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
    <Content Include="$(OutputPath)/ref/*.dll" Condition="Exists('$(OutputPath)\ref')">
      <PackagePath>ref/$(TargetFramework)/%(Filename)%(Extension)</PackagePath>
      <Pack>true</Pack>
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
</Project>
